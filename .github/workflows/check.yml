name: check

on:
    push:
        branches:
            - master
            - staging
            - trying
    pull_request:

jobs:
    check-license:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Check license
              run: ./check-license.sh

    build:
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-latest, windows-latest ]
                rust-version: [ 1.44.1, nightly-2020-06-29 ]
                base-ide: [ idea, clion ]
                platform-version: [ 201, 202 ]
                # TODO: pass minimal supported versions of IDEs. See .travis.yml
                include:
                    - os: ubuntu-latest
                      rust-version: 1.32.0
                      base-ide: idea
                      platform-version: 201

        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v1

            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                  java-version: 1.8

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: ${{ matrix.rust-version }}
                  components: rust-src, rustfmt, clippy
                  default: true

            - name: Install evcxr
              if: matrix.os != 'windows-latest' && matrix.rust-version >= '1.40.0' # BACKCOMPAT: Rust 1.39.0
              uses: actions-rs/cargo@v1
              with:
                  command: install
                  args: evcxr_repl

            - name: Check environment
              run: |
                  rustc --version
                  rustup component list --installed
                  cargo install --list

            - name: Set up env variables
              # see https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
              run: |
                  echo "::set-env name=ORG_GRADLE_PROJECT_baseIDE::${{ matrix.base-ide }}"
                  echo "::set-env name=ORG_GRADLE_PROJECT_platformVersion::${{ matrix.platform-version }}"

            - name: Download
              uses: eskatos/gradle-command-action@v1
              with:
                  arguments: :resolveDependencies -Pkotlin.incremental=false --no-daemon

            - name: Build
              uses: eskatos/gradle-command-action@v1
              with:
                  arguments: assemble testClasses -Pkotlin.incremental=false --no-daemon

            - name: Check
              uses: eskatos/gradle-command-action@v1
              with:
                  arguments: check -PexcludeTests=org/rustPerformanceTests/** -Pkotlin.incremental=false --no-daemon

            - name: Check bundled Rust formatters
              if: matrix.os != 'windows-latest'
              uses: eskatos/gradle-command-action@v1
              with:
                  arguments: runPrettyPrintersTests --no-daemon
